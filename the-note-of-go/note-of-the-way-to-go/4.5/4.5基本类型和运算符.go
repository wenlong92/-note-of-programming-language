package main


// 布尔、数字、字符
// 表达式是一种特定类型的值，可以由其他值和运算符组合
// 一元运算符只用于一个值的操作（作为后缀），二元运算符可以和两个值或者操作数结合（作为中缀）

func main() {
	// 布尔类型bool
	var boolType = true
	// 两个类型相同的值可以用 == 或 != 运算符比较并获得一个布尔值

	// ! 为一元运算符  &&、||、==、!= 为二元运算符

	// 数字类型
	// Go支持整型和浮点型数字（无float，只有float32和float64，无double）

	// 基于架构类型的的有 int uint uintptr
	// 32位操作系统时，int uint 为32位（4字节），64位操作系统时，int uint 为64位（8字节）
	// uintptr长度为只足够存放一个指针

	// int 是计算最快的一种类型；整型零值为0，浮点型零值为0.0

	// 尽可能使用float64，因为math包中所有有关数学运算的函数都会接收这个类型

	// 可以使用 a := uint64(0)同时完成转换和赋值操作，这样a的类型就是uint64

	// Go中不允许不同类型之间的混合使用，但对常量的类型限制很少，因此允许常量之间的混合使用，例如：
	var a int
	var b int32
	a = 15
	b = a + a //报错
	b = b + 5

	// 复数 complex64（32位实数和虚数） complex128（64位实数和虚数）
	// 使用 re+imI 表示复数  re表示实数  im表示虚数  I表示根号负1
	var c1 complex64 = 5 + 10i

	// 如果re和im均为float32，则complex64的复数可通过一下方式获得：
	c = complex64(re, im)

	// 函数real(c)和imag(c) 可以分别获得相应实数和虚数部分


	// 严格来说，字符类型(不是字符串)并不是Go语言的一个类型，字符知识整数的特殊用例。byte类型时uint8的别名
} 